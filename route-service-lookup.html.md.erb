---
title: Configuring Route Service Lookup
owner: CF for VMs Networking
---

This topic describes configuring route service lookup in <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).


## <a id="overview"></a> Overview

You can bind your app to a route service to preprocess requests before they reach an app. Example use cases include authentication, rate limiting, and caching services. For more information, see [Route Services](../services/route-services.html).

The **Bypass security checks for route service lookup** checkbox in the **Networking** pane of the <%= vars.app_runtime_abbr %> tile allows you to configure how the Gorouter handles traffic for apps that are bound to route services. The configuration options are:

* **Default lookup:** Default lookup is configured when you disable the **Bypass security checks for route service lookup** checkbox. In this case, the Gorouter does not check for an existing route. It sends traffic back through the load balancer when the traffic is for an internal route service.

* **Bypass mode:** Bypass mode is configured when you enable the **Bypass security checks for route service lookup** checkbox. The Gorouter checks for an existing route. If the Gorouter finds the route and the route service is internal, it sends the traffic directly to the route service and skips the load balancer. This improves performance, but introduces the security risk described in [Bypass Mode and External Route Service (Security Risk)](#bypass-external).

For more information, see [Summary of Behavior in Different Configurations](#summary).

For configuration guidance and procedures, see [Configure Route Service Lookup](#configure).


## <a id="configure"></a> Configure Route Service Lookup

These sections provide guidance and configuration steps for route service lookup.

### <a id="guidance"></a> Guidance

<%= vars.company_name %> recommends that you do not configure <%= vars.app_runtime_abbr %> for bypass mode because of the security risk described in [Bypass Mode and External Route Service (Security Risk)](#bypass-external). However, you may need to do so if your load balancer requires mutual TLS from clients.

If your load balancer requires mutual TLS from clients and <%= vars.app_runtime_abbr %> is configured for default lookup, the Gorouter cannot handle traffic successfully for internal route services. This is because the Gorouter does not have the necessary certificates from the client to communicate back with the load balancer for DNS lookup. Therefore you must configure bypass mode so the Gorouter can send the traffic directly to the route service.

### <a id="enable"></a> Configure <%= vars.app_runtime_abbr %> for Bypass Mode

To configure bypass mode:

1. Navigate to the <%= vars.ops_manager_full %> Installation Dashboard.

1. Click the <%= vars.app_runtime_abbr %> tile.

1. Select **Networking**.

1. Under **Route services**, select **Enable**.

1. Enable the **Bypass security checks for route service lookup** checkbox.

1. Follow the procedure in [Mitigate Security Risk](#mitigate-risk).

#### <a id="mitigate-risk"></a> Mitigate Security Risk

To prevent users from intercepting traffic for externally-hosted route services:

1. Create an org for use by the <%= vars.app_runtime_abbr %> admin.

1. Register all external route service domains as private domains in the org you created.

1. Monitor <%= vars.app_runtime_abbr %> for the addition of new external route services and ensure you follow the same process for those external route services. One way to do this is by using `cf curl` to regularly view a list of user-provided service instances. Run:

	```
	cf curl /v2/user_provided_service_instances
	```
	<p class="note"><strong>Note:</strong> Since route services can be added by any space developer, this may be difficult to manage.</p>

### <a id="disable"></a> Configure <%= vars.app_runtime_abbr %> for Default Lookup

To configure <%= vars.app_runtime_abbr %> for default lookup behavior, with bypass mode disabled:

1. Navigate to the <%= vars.ops_manager_full %> Installation Dashboard.

1. Click the <%= vars.app_runtime_abbr %> tile.

1. Select **Networking**.

1. Under **Route services**, select **Enable**.

1. Disable the **Bypass security checks for route service lookup** checkbox.

1. Communicate to developers of route services that the domain name for their internally-hosted route services must resolve to the load balancer.

1. If your load balancer or Gorouter terminates TLS:
	1. Work with developers of route services to ensure the load balancer or Gorouter have TLS certificates that are valid for the route service URL.
	1. Ensure that the TLS certificate from your load balancer is either signed by a well-known Certificate Authority (CA), or the CA has been added to the **Certificate Authorities trusted by the Gorouter and HAProxy** field in the **Networking** pane of the <%= vars.app_runtime_abbr %> and <%= vars.segment_runtime_full %> tiles. The CA for the TLS certificate provided by the load balancer must be trusted by the Gorouter.

1. Work with developers of route services to verify that their internal route service apps are reachable. You can do this by visiting the HTTPS URL of the route service directly and confirming that the app received the request with the `cf logs` output for the route service app.


## <a id="summary"></a> Summary of Behavior in Different Configurations

These sections describe how the Gorouter behaves when bypass mode is enabled or disabled and when a route service is internal or external.

### <a id="default-internal"></a> Default Lookup and Internal Route Service

This section describes how the Gorouter handles app requests when:

* The **Bypass security checks for route service lookup** checkbox in <%= vars.app_runtime_abbr %> is disabled.
* The app is bound to a route service that is hosted on <%= vars.app_runtime_abbr %>.

In this case, when the Gorouter receives the request, it sends the traffic back to the load balancer to resolve DNS. The load balancer then sends the traffic back to the Gorouter.

The diagram below illustrates the flow of the request and numbers the steps to indicate order of occurrence:

![A request makes multiple trips between the load balancer and Gorouter before reaching the route service. Four boxes are labeled as follows: Load Balancer, Gorouter, Route Service, and <%= vars.app_runtime_abbr %>. The Gorouter and route service box are inside of the <%= vars.app_runtime_abbr %> box to show that they are running inside of <%= vars.app_runtime_abbr %>. Arrows numbered 1-5 indicate the flow of the request in the following order: load balancer, Gorouter, load balancer, Gorouter, Gorouter service.](default-internal.png)

### <a id="bypass-internal"></a> Bypass Mode and Internal Route Service

This section describes how the Gorouter handles app requests when:

* The **Bypass security checks for route service lookup** checkbox in <%= vars.app_runtime_abbr %> is enabled.
* The app is bound to a route service that is hosted on <%= vars.app_runtime_abbr %>.

In this case, when the Gorouter receives the request, it sends it directly to the route service. This assumes the Gorouter finds an existing route for the route service.

The diagram below illustrates the flow of the request:

![Arrows indicate the flow of the request through platform components. A request goes directly from the load balancer to the Gorouter to the route service.](bypass-internal.png)

### <a id="bypass-external"></a> Bypass Mode and External Route Service (Security Risk)

This section describes how the Gorouter handles app requests when:

* The **Bypass security checks for route service lookup** checkbox in <%= vars.app_runtime_abbr %> is enabled.
* The app is bound to a route service that is hosted outside of <%= vars.app_runtime_abbr %>.

In this case, when the Gorouter receives the request, it checks for an existing route and then sends the request directly to the route service. This enables external clients to intercept route service traffic. A developer can register the external route service domain as a private domain in <%= vars.app_runtime_abbr %> and map it to their own, malicious app. When the Gorouter receives a request for the original app bound to the external route service, it finds the domain internally and sends the request to the malicious app.

<p class="note"><strong>Note:</strong> This vulnerability exists for both externally hosted route services and route services hosted on a separate foundation. If all of your route services are hosted internally on the same foundation, you are not at risk. However, you would be at risk if externally hosted route services are later configured.</p>

The diagram below illustrates the flow of the request in the case that it is intercepted:

![A fake route service inside of <%= vars.app_runtime_abbr %> intercepts traffic intended for a route service outside of <%= vars.app_runtime_abbr %>. Five boxes are labeled as follows: Load Balancer, Gorouter, Route Service (example.com), Fake Route Service (example.com), and <%= vars.app_runtime_abbr %>. The Gorouter and fake route service boxes are inside of the <%= vars.app_runtime_abbr %> box to show that they are running inside of <%= vars.app_runtime_abbr %>. Arrows point to the load balancer and then the Gorouter to indicate the flow of traffic. Two arrows then point from the Gorouter: one to the fake route service and another to the route service. A red "X" indicates that the traffic does not go to the route service. It goes to the fake route service instead.](bypass-external.png)

### <a id="default-external"></a> Default Lookup and External Route Service

This section describes how the Gorouter handles app requests when:

* The **Bypass security checks for route service lookup** checkbox in <%= vars.app_runtime_abbr %> is disabled.
* The app is bound to a route service that is hosted outside of <%= vars.app_runtime_abbr %>.

In this case, the Gorouter sends traffic directly to the external route service without checking for an existing route.

The diagram below illustrates the flow of the request:

![Arrows indicate the flow of the request through platform components. A request goes directly from the load balancer to the Gorouter to the route service.](default-external.png)
