---
title: Securing Services Instance Credentials with Runtime CredHub
owner: CredHub
---

This topic describes how operators can ensure service instance credentials are securely stored in runtime CredHub.


## <a id='overview'></a> Overview

The <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) tile includes its own CredHub component,
separate from the CredHub component included with the BOSH Director tile.
For more information about this centralized credential management component,
see the [CredHub](https://docs.pivotal.io/platform/<%= vars.current_major_version.sub('.', '-') %>/credhub/index.html)
documentation.

Runtime CredHub exists to securely store service instance credentials.
Previously, <%= vars.app_runtime_abbr %> could only use the Cloud Controller database for storing these credentials.

When developers want their app to use a service, such as those provided by Spring Cloud Services for VMware Tanzu,
they must bind their app to an instance of that service.
Service bindings include credentials that developers can use to access the service from their app.
For more information, see [Binding Credentials](../services/binding-credentials.html).

To ensure that service instance credentials are stored in runtime CredHub,
you must configure <%= vars.app_runtime_abbr %> to enable this functionality.
Not all services support the use of runtime CredHub.

<%= vars.app_runtime_abbr %> supports services that do and do not use runtime CredHub.
Services that do not use runtime CredHub continue to pass their credentials to the Cloud Controller database.

Runtime CredHub supports credential rotation. For more information, see [Rotating Runtime CredHub Encryption Keys](../opsguide/credential-rotation.html).


## <a id='services'></a> Services that Use Secure Binding Credentials

The procedures in this document are only effective for services that support storing their instance credentials in runtime CredHub. To learn whether a service supports this feature, see the table below or the documentation for that service.

<table id='service-table' border="1" class="nice" >
  <tr>
    <th>Service</th>
    <th>Versions with Secure Binding Credentials</th>
    <th>VMware Tanzu Network Listing</th>
  </tr>
  <tr>
    <td>VMware Tanzu GemFire and Pivotal Cloud Cache</td>
    <td>v1.7 and later</td>
    <td><a href="https://network.pivotal.io/products/tanzugemfire/">VMware Tanzu GemFire</a></td>
  </tr>
  <tr>
    <td>CredHub Service Broker</td>
    <td>All</td>
    <td><a href="https://network.pivotal.io/products/credhub-service-broker">CredHub Service Broker</a></td>
  </tr>
  <tr>
    <td>VMware Tanzu SQL [MySQL]</td>
    <td>v2.3 and later (available to user groups only)</td>
    <td><a href="https://network.pivotal.io/products/pivotal-mysql">VMware Tanzu SQL [MySQL]</a></td>
  </tr>
  <tr>
    <td>RabbitMQ for VMware Tanzu [VMs]</td>
    <td>v1.12 and later</td>
    <td><a href="https://network.pivotal.io/products/p-rabbitmq">RabbitMQ for VMware Tanzu [VMs]</a></td>
  </tr>
  <tr>
    <td>Redis for VMware Tanzu</td>
    <td>v1.13 and later</td>
    <td><a href="https://network.pivotal.io/products/p-redis">Redis for VMware Tanzu</a></td>
  </tr>
  <tr>
    <td>Spring Cloud Services for VMware Tanzu</td>
    <td>v1.5 and later</td>
    <td><a href="https://network.pivotal.io/products/p-spring-cloud-services">Spring Cloud Services for VMware Tanzu</a></td>
  </tr>
</table>


## <a id='prereq'></a> Prerequisites

<p class="note breaking"><strong>Breaking Change:</strong> If you opt out of the BOSH DNS feature, your <%= vars.platform_name %> deployment cannot support Secure Service Instance Credentials. For more information, see <a href="http://docs.pivotal.io/pivotalcf/2-0/pcf-release-notes/runtime-rn.html#bosh-dns">BOSH DNS Service Discovery for Application Containers (Beta)</a> in the Pivotal Application Service v2.0 release notes.</p>

Runtime CredHub allows you to use one or more Hardware Security Modules (HSMs) to store encryption keys. If you wish to use an HSM with CredHub, you must configure the HSM before completing the procedures below. For more information, see [Preparing CredHub HSMs for Configuration](https://docs.pivotal.io/platform/<%= vars.current_major_version.sub('.', '-') %>/customizing/hsm-config.html).


## <a id='pas-config'></a> Step 1: Configure the <%= vars.app_runtime_abbr %> Tile

To configure the <%= vars.app_runtime_abbr %> tile to support securing service instance credentials
in CredHub, you must:

* In the **CredHub** pane, provide at least one encryption key. CredHub supports multiple encryption key providers.

* In the **Resource Config** pane, set the number of **CredHub** instances to at least one.

CredHub configuration options include:

* Internal or external databases

* Encryption keys stored internally, externally in a Hardware Security Module (HSM), or both

To configure the <%= vars.app_runtime_abbr %> tile,
see [Configuring <%= vars.app_runtime_abbr %>](../customizing/configure-pas.html).


## <a id='asgs'></a> Step 2: Create App Security Groups

App Security Groups (ASGs) are network policy rules specifying protocols, ports, and IP ranges that apply to outbound network connections initiated from apps.

<p class="note"><strong>Note:</strong> The default ASGs in <%= vars.platform_name %> allow apps
running on your deployment to send traffic to almost any IP address.
This step is only required if your ASGs restrict network access from apps to the network
on which <%= vars.app_runtime_abbr %> runs.
For more information, see <a href="./app-sec-groups.html">Restricting App Access to
Internal <%= vars.app_runtime_abbr %> Components</a>.</p>

To ensure the ASGs for your deployment allow apps to communicate with the runtime CredHub API:

1. From the <%= vars.app_runtime_abbr %> tile, click **Assign AZs and Networks** and
   record the selected network where the tile is installed.

1. From the BOSH Director tile, in the **Settings** tab, click **Create Networks**.

1. In the **Networks** section, click the name of the <%= vars.app_runtime_abbr %> network to expand it.

1. Record the CIDR for the <%= vars.app_runtime_abbr %> network.

1. Create a file named `runtime-credhub.json` for specifying your ASG rules. Copy the content below into the file. Replace `YOUR-TAS-CIDR` with the CIDR you recorded in the previous step.

    ```
    [
      {
      "protocol": "tcp",
      "destination": "YOUR-TAS-CIDR",
      "ports": "8844"
      }
    ]
    ```

1. Create an ASG that allows apps to access the CredHub API by running:

    ```
    cf create-security-group runtime-credhub ~/workspace/runtime-credhub runtime-credhub.json
    ```

1. Bind this ASG to your deployment or the specific space in which you want apps to access CredHub. For more information about binding ASGs, see the [Bind ASGs](../concepts/asg.html#binding-groups) section of the _App Security Groups_ topic. Ensure that apps deployed as part of the service tile installation process have access to CredHub in addition to the apps pushed to the platform by developers. For example, the Spring Cloud Services for VMware Tanzu tile deploys the `spring-cloud-broker` app to the `p-spring-cloud-services` space of the `system` org.

1. Restart apps for the ASGs to take effect. Optionally, you can use the [app-restarter cf CLI plugin](https://github.com/cloudfoundry-incubator/app-restarter) to restart all apps in a particular space, org, or deployment.


## <a id='service-instances'></a> Step 3: Unbind and Rebind Service Instances

For any service instance bindings that existed before runtime CredHub was supported for that service, you must work with your developers to unbind and rebind the service instances to their apps. If you do not unbind and rebind the service, apps continue functioning as normal and fetching credentials from the Cloud Controller database.

<p class="note"><strong>Note:</strong> This step is not required for bindings created after you installed the new version of the service tile that supports CredHub and you completed the procedures in steps 1 and 2 of this topic.</p>

To unbind and rebind your service instances to their apps:

1. Unbind the service instance from the app by running:

    ```
    cf unbind-service YOUR-APP YOUR-SERVICE-INSTANCE
    ```
    Where:
    * `YOUR-APP` is the app to which you bound the service instance.
    * `YOUR-SERVICE-INSTANCE` is the service instance you want to unbind from the app.

1. Rebind the service instance to the app by running:

    ```
    cf bind-service YOUR-APP YOUR-SERVICE-INSTANCE
    ```
    Where:
    * `YOUR-APP` is the app from which you unbound the service instance.
    * `YOUR-SERVICE-INSTANCE` is the service instance you want to rebind to the app.

1. Review the `VCAP_SERVICES` environment variable to verify that the new service instance binding includes CredHub pointers by running:

    ```
    cf env YOUR-APP
    ```
    Where `YOUR-APP` is the app to which you bound the service instance.
    <br>
    <br>
    For help parsing the output of the `cf-env` command, see [VCAP_SERVICES](../devguide/deploy-apps/environment-variable.html#VCAP-SERVICES)
     in _<%= vars.app_runtime_abbr %> Environment Variables_.

1. Restart the app to apply the service instance binding by running:

    ```
    cf restart YOUR-APP
    ```
    Where `YOUR-APP` is the app to which you bound the service instance.
    <br>
    <br>
    If you run `cf-env` again, you can see the `VCAP-SERVICES` environment variable now contains the credentials for the service instance binding.
